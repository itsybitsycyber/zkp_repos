;Unnamed: 0;UniqueID;Name;Description;URL;Type Notes;KnowledgeLevel;ToolType;ProofConstruction;ProvingSystem;Language;License;Disclaimer;Production
0;1169;algebra/arkworks-rs;arkworks/algebra;Libraries for finite field, elliptic curve, and polynomial arithmetic;https://github.com/arkworks-rs/algebra;;Expert;Low-level ZK Development;snark;;Rust;Apache 2.0, MIT;WARNING: This is an academic proof-of-concept prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.;FALSE
2;1171;crypto-primitives/arkworks-rs;arkworks/crypto-primitives;Interfaces and implementations of cryptographic primitives, along with R1CS constraints for them;https://github.com/arkworks-rs/crypto-primitives;;Expert;Low-level ZK Development;snark;;Rust;Apache 2.0, MIT;WARNING: This is an academic proof-of-concept prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.;FALSE
3;1172;curves/arkworks-rs;arkworks/curves;Implementations of popular elliptic curves ;https://github.com/arkworks-rs/curves;;Expert;Low-level ZK Development;snark;;Rust;Apache 2.0, MIT;;FALSE
4;1173;gemini/arkworks-rs;arkworks/gemini;An elastic proof system based on arkworks;https://github.com/arkworks-rs/gemini;;Expert;Low-level ZK Development;snark;gemini;Rust;MIT;This code is not meant for production use and has not been audited.;FALSE
5;1174;gm17/arkworks-rs;arkworks/gm17;A Rust library for the preprocessing zkSNARK of Groth and Maller;https://github.com/arkworks-rs/gm17;;Expert;Low-level ZK Development;snark;gm17;Rust;Apache 2.0, MIT;WARNING: This is an academic proof-of-concept prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.;FALSE
6;1175;groth16/arkworks-rs;arkworks/groth16;A Rust implementation of the Groth16 zkSNARK;https://github.com/arkworks-rs/groth16;;Expert;Low-level ZK Development;snark;groth16;Rust;Apache 2.0, MIT;WARNING: This is an academic proof-of-concept prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.;FALSE
7;1176;marlin/arkworks-rs;arkworks/marlin;A Rust library for the Marlin preprocessing zkSNARK;https://github.com/arkworks-rs/marlin;;Expert;Low-level ZK Development;snark;marlin;Rust;Apache 2.0, MIT;WARNING: This is an academic prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.;FALSE
8;1177;nonnative/arkworks-rs;arkworks/nonnative;R1CS constraints for non-native field arithmetic;https://github.com/arkworks-rs/nonnative;;Expert;Low-level ZK Development;snark;;Rust;Apache 2.0, MIT;"WARNING: This is an academic proof-of-concept prototype; in particular, it has not received careful code review. This implementation is NOT ready for production use.";FALSE
9;1178;poly-commit/arkworks-rs;arkworks/poly-commit;A Rust library for polynomial commitments;https://github.com/arkworks-rs/poly-commit;;Expert;Low-level ZK Development;snark;marlin;Rust;Apache 2.0, MIT;WARNING: This is an academic prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.;FALSE
10;1179;r1cs-std/arkworks-rs;arkworks/r1cs-std;R1CS constraints for bits, fields, and elliptic curves;https://github.com/arkworks-rs/r1cs-std;;Expert;Low-level ZK Development;snark;;Rust;Apache 2.0, MIT;WARNING: This is an academic proof-of-concept prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.;FALSE
11;1180;snark/arkworks-rs;arkworks/snark;Interfaces for Relations and SNARKs for these relations;https://github.com/arkworks-rs/snark;;Expert;Low-level ZK Development;snark;;Rust;Apache 2.0, MIT;WARNING: This is an academic proof-of-concept prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.;FALSE
12;1181;sponge/arkworks-rs;arkworks/sponge;"This library is archived; see crypto-primities for the latest version of this code";https://github.com/arkworks-rs/sponge;;Expert;Low-level ZK Development;snark;;Rust;Apache 2.0, MIT;WARNING: This is an academic prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.;FALSE
13;1182;std/arkworks-rs;arkworks/std;A standard library wrapper for use in the `arkworks` ecosystem;https://github.com/arkworks-rs/std;;Expert;Low-level ZK Development;snark;;Rust;Apache 2.0, MIT;WARNING: This is an academic proof-of-concept prototype, and in particular has not received careful code review. This implementation is NOT ready for production use.;FALSE
16;1185;bulletproofs/sdiehl;bulletproofs (sdiehl);Bulletproofs are short non-interactive zero-knowledge proofs that require no trusted setup ;https://github.com/sdiehl/bulletproofs;write proofs and circuits;Intermediate;Proof System;bulletproofs;;Haskell;BSD-3-Clause license;This is experimental code meant for research-grade projects only. Please do not use this code in production until it has matured significantly.;FALSE
23;1193;libsnark/scipr-lab;libsnark;C++ library for zkSNARKs;https://github.com/scipr-lab/libsnark;https://github.com/christianlundkvist/libsnark-tutorial;Intermediate to Expert;Library;snark;groth16;C++;MIT;This code is a research-quality proof of concept, and has not yet undergone extensive review or testing. It is thus not suitable, as is, for use in critical or production systems.;FALSE
25;1195;miden-vm/0xpolygonmiden;miden-vm;STARK-based virtual machine;https://github.com/0xPolygonMiden/miden-vm;No need for ZKP knowledge https://www.youtube.com/watch?v=Q8xYSOx82U0;Beginner;zkEVM;stark;;Rust;MIT;WARNING: This project is in an alpha stage. It has not been audited and may contain bugs and security flaws. This implementation is NOT ready for production use.;FALSE
27;1198;plonky/mir-protocol;plonky;Recursive SNARKs based on Plonk and Halo;https://github.com/mir-protocol/plonky;archived. ;Intermediate;Proof System;snark;plonk, halo;Rust;Apache 2.0, MIT;This code has not been thoroughly reviewed or tested, and should not be used in any production systems.;FALSE
28;1199;plonky2/mir-protocol;plonky2;;https://github.com/mir-protocol/plonky2;https://polymerlabs.medium.com/a-tutorial-on-writing-zk-proofs-with-plonky2-part-i-be5812f6b798 - requires you to write circuits. “While plonky2 or other zk proof libraries may provide other functions to model your computation on, those functions are ultimately just higher-level arithmetic circuits.”;Intermediate;Proof System;snark, stark;plonk;Rust;Apache 2.0, MIT;This code has not yet been audited, and should not be used in any production systems.;FALSE
30;1201;pysnark/charterhouse;pysnark;Python-based system for zk-SNARK based verifiable computations and smart contracts;https://github.com/Charterhouse/pysnark;little documentation and resources. https://meilof.github.io/pysnark/ can use libsnark, snarkjs as backend;Intermediate;Library;snark;pinocchio;Python;;"PySNARK may be used for non-commercial, experimental and research purposes. PySNARK is experimental and not fit for production environment. In particular, PySNARK does not use cryptographically secure randomness!
";FALSE
34;1206;winterfell/facebook;winterfell;A STARK prover and verifier for arbitrary computations;https://github.com/facebook/winterfell;Some abstraction, but still non trivial. https://www.youtube.com/watch?v=Q8xYSOx82U0;Intermediate;Library;stark;;Rust;MIT;WARNING: This is a research project. It has not been audited and may contain bugs and security flaws. This implementation is NOT ready for production use.;FALSE
14;1183;bellman/zkcrypto;bellman;zk-SNARK library.;https://github.com/zkcrypto/bellman;https://trapdoortech.medium.com/zkp-deep-into-bellman-library-9b1bf52cb1a6;Intermediate to Expert;Library;snark;groth16;Rust;Apache 2.0, MIT;;TRUE
15;1184;bulletproofs/dalek-cryptography;bulletproofs; A pure-Rust implementation of Bulletproofs using Ristretto.;https://github.com/dalek-cryptography/bulletproofs;https://cathieyun.medium.com/building-on-bulletproofs-2faa58af0ba8;Intermediate;Proof System;bulletproofs;merlin;Rust;MIT;;TRUE
32;1203;snarkjs/iden3;snarkjs;zkSNARK implementation in JavaScript & WASM;https://github.com/iden3/snarkjs;;Intermediate;Library;snark;plonk, groth16;JavaScript;GNU General Public License;;TRUE
17;1187;cairo-lang/starkware-libs;cairo-lang;;https://github.com/starkware-libs/cairo-lang;Starknet suite may contain learning curve but a lot of support. The disadvantage, in my opinion, is that Cairo is not easy. It is similar to assembly code and has a lot steeper learning curve. Another point worth mentioning is that it is a language being developed, so you will not be able to find all the errors, and lots is missing in terms of documentation and functionality at the moment. You will also need to maintain the repo to have the latest updates as you are writing code. There are not many educational guides as well.  Abstracts ZKP, but cairo-lang is assembly like;Beginner;DSL;stark;;Python;Cairo Toolchain License;;TRUE
18;1188;circom/iden3;circom;zkSnark circuit compiler;https://github.com/iden3/circom;It is designed as a low-level circuit language, mimicking the design of electronic circuits, for naturally defining Arithmetic circuits.;Intermediate;DSL;snark;groth16, plonk;WebAssembly;GNU General Public License;;TRUE
19;1189;circomlib/iden3;circomlib;Library of basic circuits for circom;https://github.com/iden3/circomlib;circom custom circuits;Beginner to Intermediate;Library;snark;plonk;JavaScript;GNU General Public License;;TRUE
20;1190;gnark/consensys;gnark;gnark is a fast zk-SNARK library that offers a high-level API to design circuits. The library is open source and developed under the Apache 2.0 license;https://github.com/Consensys/gnark;fast zk-SNARK library that offers a high-level API to design circuits;Intermediate;Library;snark;groth16, plonk;Go;Apache 2.0;gnark has been partially audited and is provided as-is, we make no guarantees or warranties to its safety and reliability. In particular, gnark makes no security guarantees such as constant time implementation or side-channel attack resistance.;TRUE
21;1191;halo2/zcash;halo2;;https://github.com/zcash/halo2;Halo2 is specific to PLONKish, giving you very direct control of how circuits are represented in the arithmetization. This makes Halo2 very low-level, but ideal for writing highly optimized circuits.;Intermediate;Proof System;snark;plonk;Rust;Apache 2.0, MIT;;TRUE
22;1192;leo/aleohq;leo;🦁 The Leo Programming Language. A Programming Language for Formally Verified, Zero-Knowledge Applications;https://github.com/AleoHQ/leo;Don’t have to know the inner workings of ZKPs - it is done behind the scenes. ;Beginner;DSL;snark;;Rust;GNU General Public License;;TRUE
24;1194;merlin/dalek-cryptography;merlin;Composable proof transcripts for public-coin arguments of knowledge;https://github.com/dalek-cryptography/merlin;;Intermediate;Proof System;snark, stark, bulletproofs;merlin;Rust;MIT;;TRUE
26;1197;openzkp/0xproject;openzkp;OpenZKP - pure Rust implementations of Zero-Knowledge Proof systems.;https://github.com/0xProject/OpenZKP;https://medium.com/@recmo/introducing-openzkp-1dea6b22dceb No high-level language.Constraints are specified using their algebraic expressions. This requires complicated and careful design from the library user and is easy to do wrong, leading to insecure systems. A high level language would help make development simpler and safer and facilitate re-use of components.;Intermediate;Library;stark;;Rust;Apache 2.0;"That being said, it also has a number of limitations, it has
no high-level language,
no comprehensive security audit,
no perfect zero-knowledge,
hard-coded field and hash function,
and some others, see features and limitations below for details.";TRUE
29;1200;plonky3/plonky3;plonky3;A collection of libraries related to polynomial IOPs (PIOPs);https://github.com/Plonky3/Plonky3;;Intermediate;Library;snark, stark;plonk;Rust;Apache 2.0, MIT;;TRUE
31;1202;risc0/risc0;risc0;RISC Zero is a zero-knowledge verifiable general computing platform based on zk-STARKs and the RISC-V microarchitecture.;https://github.com/risc0/risc0;Developers interact with RISC Zero by simply writing code and the service handles all the backend complexity.;Beginner;zkVM;stark;;C++;Apache 2.0;That said, this code is still under heavy development and has not been audited. There may be bugs in the zk-STARK implementation, the arithmetic circuit used to instantiate the RISC-V zkVM, or any other element of the code's implementation. Such bugs may impact the security of receipts, leak information, or cause any other manner of problems. Caveat emptor. WARNING: This software is still experimental, we do not recommend it for production use.;FALSE
35;1207;zksync/matter-labs;zksync;zkSync: trustless scaling and privacy engine for Ethereum;https://github.com/matter-labs/zksync;abstraction. contracts written in solidity. ;Beginner;zkEVM;snark;plonk;Rust;Apache 2.0, MIT;;TRUE